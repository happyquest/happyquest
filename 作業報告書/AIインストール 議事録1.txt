# AIインストールサービス検討 議事録

日時: 2025年3月24日
目的: AIインストールサービス構想の検討

## サービス概要

外付けSSDにAIがOSインストールと使用目的に合わせた環境設定一式をインストールし、使ってみて気に入ったら今のOSと環境をバックアップとして保存し、内蔵SSDに外付けSSDの設定と環境を全部一式コピーするサービス。

## Terraformでの自動化検討

### Terraformで自動化できるもの

1. **基本的なインフラストラクチャ**
   - クラウドインスタンスの作成（AWS EC2、GCP VMなど）
   - ネットワーク設定
   - Ubuntu 22.04のベースイメージ選択

2. **初期パッケージインストール**
   - `remote-exec`プロビジョナを使ったSSHのインストールと構成
   - DockerやGitなどの基本的なパッケージのインストール

3. **スクリプト実行**
   - シェルスクリプトを実行してソフトウェアをインストール

### Terraformで難しい/できないこと

1. **ローカル開発環境の詳細構成**
   - Terraformはクラウド/サーバーリソース管理に特化しており、ローカル環境の細かい設定は不得意

2. **対話型インストールの自動化**
   - Homebrew、pyenv、nvmなどのインタラクティブな要素を含むインストール

3. **複雑な環境変数設定**
   - `.bashrc`への環境変数追加や設定
   - PKG_CONFIG_PATHのような詳細な環境変数の設定

4. **バージョン固有の環境管理**
   - Python 3.12.9やNode.js 23.8.0といった特定バージョンの詳細な管理
   - 複数バージョンの共存管理

## Ansibleを活用したアーキテクチャ提案

### Ansibleの強み

1. **宣言的構成管理**
   - YAMLで理解しやすく記述可能
   - 何をどうするかではなく「あるべき状態」を定義

2. **べき等性の保証**
   - 何度実行しても同じ結果になる
   - 部分的な再実行や修正が可能

3. **エージェントレス**
   - クライアント側にエージェントのインストール不要
   - SSHのみで動作可能

4. **広範なモジュール**
   - 様々なOS、ソフトウェア、クラウドサービスをサポート
   - コミュニティによる豊富なプレイブック

### 補完ツールの活用

1. **OSイメージ作成とクローニング**
   - **Packer** + Ansible: ベースOSイメージの自動構築
   - **CloneZilla/DD**: 完成した環境の高速複製

2. **ハードウェア検出と最適化**
   - **ハードウェア検出スクリプト**: 個別ハードウェアの検出とドライバ最適化
   - **Ansible**: 検出結果に基づく設定適用

3. **バックアップと移行**
   - **Restic/Borg**: 増分バックアップ
   - **Rsync**: ファイル単位の同期
   - カスタムスクリプト: ブートローダ調整

### 推奨アーキテクチャ

```
[マスターイメージ生成]
Packer → Ansible → カスタムスクリプト

[顧客へのデプロイ]
基本イメージ → ハードウェア検出 → Ansible (カスタマイズ) → 外付けSSD

[内蔵SSDへの移行]
バックアップツール → CloneZilla/DD → ブートローダ調整スクリプト
```

## 実装ポイント

1. **モジュール化されたAnsibleロール**
   - 用途別（開発、デザイン、事務）のロール
   - ハードウェア別の最適化ロール
   - ユーザー設定のカスタマイズロール

2. **AIによる最適環境推論システム**
   - ユーザーの利用目的からAnsibleプレイブックを自動生成
   - ハードウェア構成検出から最適ドライバを判断

3. **移行プロセスの自動化**
   - 内蔵SSDのバックアップ自動化
   - ブートローダ構成の自動調整

## 結論

Ansibleは環境構築の中核として優れているが、完全なAIインストールサービスには複数ツールの統合が必要。Ansible+Packer+カスタムスクリプトの組み合わせが、柔軟性と自動化のバランスが取れた選択と考えられる。特にAIによるユーザーニーズ分析とハードウェア最適化を組み合わせることで、従来のOSインストールサービスと一線を画す価値提供が可能。 