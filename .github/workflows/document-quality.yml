name: Document Quality Check

on:
  pull_request:
    branches: [ main, develop ]
    paths: [ '**.md', 'docs/**' ]
  push:
    branches: [ main, develop ]
    paths: [ '**.md', 'docs/**' ]

jobs:
  markdown-lint:
    name: Markdown Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install markdownlint-cli
        run: npm install -g markdownlint-cli
        
      - name: Run Markdown Lint
        run: markdownlint "**/*.md" --config .markdownlint.json

  link-check:
    name: Link Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Check Links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'yes'
          config-file: '.markdown-link-check.json'

  format-validation:
    name: Document Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install Dependencies
        run: |
          pip install pyyaml python-frontmatter
          
      - name: Validate Work Reports
        run: |
          python scripts/validate_documents.py --type work_report --files "WORK_REPORT_*.md"
          
      - name: Validate Trouble Cases
        run: |
          python scripts/validate_documents.py --type trouble_cases --files "TROUBLE_CASES_*.md"
          
      - name: Check PROJECT_RULES Structure
        run: |
          python scripts/validate_documents.py --type project_rules --files "PROJECT_RULES.md"

  terminology-check:
    name: Terminology Consistency
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install textlint
        run: |
          npm install -g textlint
          npm install -g textlint-rule-preset-ja-technical-writing
          npm install -g textlint-rule-terminology
          
      - name: Run Terminology Check
        run: textlint "**/*.md" --config .textlintrc.json

  documentation-metrics:
    name: Documentation Metrics
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 履歴全取得
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Calculate Documentation Metrics
        run: |
          python scripts/doc_metrics.py --output metrics.json
          
      - name: Upload Metrics
        uses: actions/upload-artifact@v3
        with:
          name: documentation-metrics
          path: metrics.json
          
      - name: Comment PR with Metrics
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const metrics = JSON.parse(fs.readFileSync('metrics.json', 'utf8'));
            
            const comment = `## 📊 文書品質メトリクス
            
            | 項目 | 値 | 基準 | 状態 |
            |------|-----|------|------|
            | 文書カバレッジ | ${metrics.coverage}% | 95% | ${metrics.coverage >= 95 ? '✅' : '❌'} |
            | フォーマット準拠率 | ${metrics.format_compliance}% | 95% | ${metrics.format_compliance >= 95 ? '✅' : '❌'} |
            | 用語統一性 | ${metrics.terminology}% | 98% | ${metrics.terminology >= 98 ? '✅' : '❌'} |
            | リンク有効性 | ${metrics.link_validity}% | 100% | ${metrics.link_validity >= 100 ? '✅' : '❌'} |
            
            ### 📈 詳細分析
            - 総文書数: ${metrics.total_documents}
            - 更新された文書: ${metrics.updated_documents}
            - 新規追加文書: ${metrics.new_documents}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  plantuml-check:
    name: PlantUML Syntax Check
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '.puml') || contains(github.event.pull_request.title, 'plantuml')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          
      - name: Download PlantUML
        run: |
          wget https://github.com/plantuml/plantuml/releases/latest/download/plantuml.jar
          
      - name: Check PlantUML Syntax
        run: |
          find docs/plantuml -name "*.puml" -exec java -jar plantuml.jar -checkonly {} \;

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [markdown-lint, link-check, format-validation, terminology-check]
    if: always()
    steps:
      - name: Check Quality Gate
        run: |
          if [[ "${{ needs.markdown-lint.result }}" == "success" && \
                "${{ needs.link-check.result }}" == "success" && \
                "${{ needs.format-validation.result }}" == "success" && \
                "${{ needs.terminology-check.result }}" == "success" ]]; then
            echo "✅ 品質ゲート通過: 全チェック成功"
            exit 0
          else
            echo "❌ 品質ゲート失敗: 修正が必要です"
            echo "Markdown Lint: ${{ needs.markdown-lint.result }}"
            echo "Link Check: ${{ needs.link-check.result }}"
            echo "Format Validation: ${{ needs.format-validation.result }}"
            echo "Terminology Check: ${{ needs.terminology-check.result }}"
            exit 1
          fi
          
      - name: Comment Quality Gate Result
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const results = {
              'markdown-lint': '${{ needs.markdown-lint.result }}',
              'link-check': '${{ needs.link-check.result }}',
              'format-validation': '${{ needs.format-validation.result }}',
              'terminology-check': '${{ needs.terminology-check.result }}'
            };
            
            const allPassed = Object.values(results).every(result => result === 'success');
            const emoji = allPassed ? '✅' : '❌';
            const status = allPassed ? '通過' : '失敗';
            
            let comment = `## ${emoji} 品質ゲート結果: ${status}\n\n`;
            comment += '| チェック項目 | 結果 |\n';
            comment += '|-------------|------|\n';
            
            for (const [check, result] of Object.entries(results)) {
              const checkEmoji = result === 'success' ? '✅' : '❌';
              comment += `| ${check} | ${checkEmoji} ${result} |\n`;
            }
            
            if (!allPassed) {
              comment += '\n⚠️ 修正が必要な項目があります。詳細はActionログを確認してください。';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            }); 