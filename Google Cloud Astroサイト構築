Astroサイト構築：Google Cloud & Terraformベストプラクティス
Genspark
Mar 23, 2025
ブックマーク
共有
インスピレーションと洞察から生成されました 197 ソースから

以下は、Astroフレームワークを用いたウェブサイトをGoogle Cloud上に構築するためのTerraformコードおよび関連コンポーネント（Cloud Run、Nginxリバースプロキシ、グローバルロードバランサー、Cloud CDN、CI/CDパイプライン）の包括的な実装例とベストプラクティスをまとめた記事です。以下の各セクションでは、各構成要素の概要、具体例、コードサンプル、そしてそれぞれの設定における重要なポイントを、公開情報の引用とともに詳しく説明します。

はじめに
本記事では、Astroを用いて構築したウェブサイトをGoogle Cloud上に展開する際に必要なインフラ構築の全体像について解説します。主要な構成要素としては、以下の項目が含まれます：

Cloud Run（自動スケーリングと運用監視）
Nginx リバースプロキシ（静的ファイル配信および最適なパフォーマンスのためのキャッシュ設定）
グローバルロードバランサー（URLマップによるルーティング）
Cloud CDN（キャッシュキーの最適化とSSL証明書の管理）
CI/CDパイプライン（GitHub Actions）（自動テスト、承認フロー、環境分離およびTerraform stateの安全な管理）
Workload Identity Federationを利用したキー無し認証（GitHub ActionsとGCP間の安全な接続）
各セクションごとにコード例や実装例を交えながら、システム全体の設計とベストプラクティスに基づいた推奨事項を解説します。引用は公開されている情報をもとにし、詳細な説明とともに各構成項目の実装例を掲載しています。

1. Astro用Dockerfileの実装例 ～ Nginxリバースプロキシとマルチステージビルド
Astroでビルドした静的サイトを効率的に配信するため、Dockerfileにマルチステージビルドを採用します。初期ステージではNode.js環境でAstroアプリケーションをビルドし、最終ステージでは軽量なNginxの公式イメージ（例：nginx:alpine）でビルド成果物を提供する構成です。以下のサンプルコードは、Astro Docs1およびAalto FITech101 Courses2の情報に基づいて実装例を示しています。

サンプルコード（マルチステージビルド）:
# ステージ1: アプリケーションのビルド
FROM node:lts AS build
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build

# ステージ2: Nginxによる静的配信
FROM nginx:alpine
COPY --from=build /app/dist /usr/share/nginx/html
# カスタム設定ファイルを配置することでリバースプロキシやキャッシュ制御が可能
COPY ./nginx/nginx.conf /etc/nginx/nginx.conf

# セキュリティ強化のため、rootlessコンテナ化を実施
USER node

EXPOSE 8080
CMD ["nginx", "-g", "daemon off;"]
ポイント：

Node.jsのLTSイメージを使用して依存関係をインストールし、Astroアプリケーションをビルド
軽量なNginxイメージで静的成果物を配信
カスタムnginx.confにより、リバースプロキシ設定やキャッシュヘッダー設定をより細かく調整可能
2. Cloud RunへのTerraform構成 ～ Auto Scaling とリソース最適化
Cloud Runはサーバーレスコンテナプラットフォームとして自動スケーリングが可能です。Terraformを用いる場合、min_instances、max_instances、CPUやmemoryのリソース割当を設定することが重要です。また、cpu_idleパラメータを追加し、CPUの制限を2に設定することが推奨されます。以下のTerraformサンプルコードは、Cloud Runサービスのリソース設定例です。Cloud Run Release Notes3 、Cloud Run instance autoscaling4およびSet maximum number of instances5を参照しています。

Terraformのサンプルコード（Cloud Runサービス設定）:
resource "google_cloud_run_service" "default" {
  name     = "my-service"
  location = "us-central1"

  template {
    spec {
      containers {
        image = "gcr.io/my-project/my-image"
        resources {
          limits = {
            cpu    = "2"      # 各インスタンスに2コアを割り当て
            memory = "512Mi"  # 512MiBのメモリ
          }
        }
      }
    }
  }

  traffic {
    latest_revision = true
    percent         = 100
  }

  metadata {
    annotations = {
      "autoscaling.knative.dev/minScale" = "1"
      "autoscaling.knative.dev/maxScale" = "5"
      "autoscaling.knative.dev/cpu_idle"  = "0.5" # CPUアイドル条件
    }
  }
}
ポイント：

min_instances と max_instances によりインスタンス数の下限と上限を管理
リソース制限の設定によりコストとパフォーマンスの最適化を図る
3. ヘルスチェックエンドポイントの実装
信頼性の高いサービス運用のためには、各コンテナの起動と動作状態を監視するヘルスチェックエンドポイントの設定が必要です。Astroアプリケーションの場合、シンプルに /health や /ping のエンドポイントを実装し、正常な稼働時にはHTTP 200を返すようにします。Configure container health checks6などが参考になります。

ヘルスチェック実装のポイント：
エンドポイント実装例：
/health エンドポイントを実装し、サーバーが正常動作している場合はHTTP 200を返す
異常時には適切なエラーコード（例: 500）を返し、監視システムが検知できるようにする
4. Nginxのキャッシュ制御とパフォーマンス最適化
4.1 Nginxキャッシュヘッダー設定
Nginxは静的ファイルを配信する際、キャッシュヘッダーの設定によりさらにパフォーマンスを向上させることが可能です。具体的には、expiresディレクティブやadd_header Cache-Controlを利用し、ブラウザキャッシュを最適化します。Cloud Run docs: Frontend proxying using Nginx7を参照ください。

サンプル設定例：
server {
  listen 80;
  server_name example.com;

  location / {
    root /usr/share/nginx/html;
    expires 30d;
    add_header Cache-Control "public, max-age=2592000";
  }
}
4.2 Nginxワーカープロセス数の最適化
Nginxのワーカープロセス数は、通常ホストの物理CPUコア数に合わせて自動的に設定するのが推奨されます。具体的には、worker_processes auto;の設定により、各CPUコアに1つのプロセスが割り当てられ最適なパフォーマンスが見込まれます。Frontend proxying using Nginx7を参照してください。

5. グローバルロードバランサーとURLマップによるルーティング設定
複数リージョンにデプロイしたCloud Runや他のバックエンドサービスに対して、グローバルロードバランサーを用いて効率的にトラフィックを分散させることが重要です。Terraformを使用してURLマップとバックエンドサービスを定義し、ホスト名とパスベースのルーティングを実装できます。また、google_compute_region_health_checkリソースを追加し、リージョン間フェイルオーバー設定を行うことが推奨されます。HA Docs8およびURL maps overview9を参照してください。

サンプルコード（URLマップ設定例）:
resource "google_compute_url_map" "example_map" {
  name            = "example-map"
  default_service = google_compute_backend_service.default.self_link

  host_rules {
    hosts        = ["example.com"]
    path_matcher = "example-path-matcher"
  }

  path_matchers {
    name            = "example-path-matcher"
    default_service = google_compute_backend_service.default.self_link

    path_rules {
      paths   = ["/api/*"]
      service = google_compute_backend_service.api_service.self_link
    }
    path_rules {
      paths   = ["/static/*"]
      service = google_compute_backend_service.static_service.self_link
    }
  }
}

resource "google_compute_region_health_check" "default" {
  name                = "example-health-check"
  check_interval_sec  = 30
  timeout_sec         = 10
  healthy_threshold   = 2
  unhealthy_threshold = 2

  http_health_check {
    port               = 80
    request_path       = "/health"
  }
}
ポイント：

URLマップによって、特定のホスト名やパスに基づく振り分けが可能
複数バックエンドへのトラフィック分割を柔軟に管理できる
6. Cloud CDNとGoogle Managed SSL証明書
Cloud CDNは、エッジネットワークを利用してコンテンツの配信速度を向上させ、オリジンサーバーの負荷を軽減します。また、Google Managed SSL証明書を利用することで、証明書の取得・管理・更新を自動化できます。Google-managed SSL Certificates10やCloud CDNキャッシュキーの最適化戦略11の情報をもとに設定例を示します。

6.1 Google Managed SSL証明書の取得
以下のTerraformコードは、Google Managed SSL証明書を取得する例です。

resource "google_compute_managed_ssl_certificate" "example_cert" {
  name = "my-cert"
  managed {
    domains = ["example.com"]
  }
}
DNSレコードを更新し、証明書の状態がACTIVEとなるのを確認します。（例：gcloud compute ssl-certificates describe my-cert --format="get(managed.domainStatus)"）参照: Google-managed SSL Certificates10

6.2 Cloud CDNキャッシュキーの最適化
Cloud CDNのキャッシュキーから不要なクエリパラメータを除外するため、以下のようにTerraformで設定します。

resource "google_compute_backend_service" "example_backend" {
  name = "example-backend"
  cdn_policy {
    cache_key_policy {
      include_query_string = false
      include_host         = true
      include_protocol     = true
    }
  }
  // その他の設定
}
(参照: Content delivery best practices12, Caching overview11)

6.3 キャッシュ有効期限と削除ポリシー
キャッシュ利用の効率性を向上させるため、TTL（有効期限）を設定します。以下はサンプル設定例です。

resource "google_compute_backend_service" "example_backend" {
  name       = "example-backend"
  enable_cdn = true
  cdn_policy {
    cache_mode  = "CACHE_ALL_STATIC"
    default_ttl = 3600    # 60分のキャッシュ有効期限
    max_ttl     = 86400   # 24時間の上限TTL
  }
}
(参照: Caching overview11, Cloud CDN release notes13)

7. CI/CDパイプラインの実装：GitHub Actionsによるプロダクション／ステージング環境の分離と承認フロー
信頼性の高いデプロイメントを実現するため、GitHub Actionsを用いたCI/CDパイプラインの構築は必須です。ここでは、環境変数（Environment）機能を用いてproductionとstagingを分離し、自動テスト、承認、デプロイまでのワークフロー例を示します。また、環境別ロールバック戦略として、Harness Terraform Rollback Stepの実装例も追加しました。Harness Docs14 、Using environments for deployment - GitHub Docs15およびTerraform manage multiple environments - Medium16の情報を踏まえています。

7.1 GitHub Environments の設定
Environment作成:

production と staging 環境をそれぞれ定義
個別のシークレット、環境変数、保護ルール（承認）を設定
ブランチ戦略:

mainブランチをproduction、developまたは専用ブランチをstagingとして管理
7.2 自動テストとデプロイ承認のワークフロー例
以下はGitHub ActionsのYAML例です。

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Install Dependencies
        run: npm install
      - name: Run Unit & E2E Tests
        run: npm test

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: test
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: "projects/XXXX/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-oidc"
          service_account: "my-service-account@example-project.iam.gserviceaccount.com"
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy my-service \
            --image gcr.io/example-project/my-image \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated

  rollback:
    name: Rollback to previous version
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Rollback using Harness
        run: |
          # Rollback step using Harness
          harness rollback terraform --environment "${{ github.ref }}" --service "my-service"
ポイント：

自動テストが成功した場合のみ次の承認・デプロイステップへ進む
Production/ステージング毎の環境設定により、シークレット・アクセス管理と保護ルールが適用される
Workload Identity Federationを用い、サービスアカウントキーをGitHub Secretsに保存せずに安全な認証を実現する
GitHub - google-github-actions/auth17
8. Keyless Authentication for CI/CD ～ Workload Identity Federationの実装
GitHub ActionsからGoogle Cloudへ安全な認証を行うため、Workload Identity Federationを利用します。これにより、長期間有効なサービスアカウントキーを使わず、短命のOAuth 2.0資格情報を自動生成して利用することが可能です。Secure your use of third party tools with identity federation18およびAccess Google Cloud from HCP Terraform with workload identity19を参照しています。

8.1 TerraformによるWorkload Identity Federation実装例
以下のコード例は、GitHub ActionsとGCP間でWorkload Identity Federationを実装するための基本的なTerraform設定例です。

locals {
  google_project_id = "example-project"
  organization_name = "example-org"
}

resource "google_iam_workload_identity_pool" "hcp_tf" {
  project                   = local.google_project_id
  workload_identity_pool_id = "hcp-tf-pool"
  display_name              = "HCP Terraform Pool"
  description               = "Used to authenticate to Google Cloud"
}

resource "google_iam_workload_identity_pool_provider" "hcp_tf" {
  project                            = local.google_project_id
  workload_identity_pool_id          = google_iam_workload_identity_pool.hcp_tf.workload_identity_pool_id
  workload_identity_pool_provider_id = "hcp-tf-provider"
  display_name                       = "HCP Terraform Provider"
  description                        = "Used to authenticate to Google Cloud"
  attribute_condition                = "assertion.terraform_organization_name==\"${local.organization_name}\""
  oidc {
    issuer_uri = "https://app.terraform.io"
  }
}
ポイント：

複数リージョンや環境ごとに専用プールを用意することで、セキュリティの向上とアクセス権の細分化が可能
Workload Identity Federationにより、GitHub Actions側から特定のサービスアカウントにアクセスできる認証情報を短命かつ安全に発行できる
9. 監査ログによるTerraform変更の追跡とセキュリティ管理
インフラ変更の透明性と安全運用を実現するため、Terraformによる変更は監査ログで追跡する必要があります。対象プロジェクトに対して必要なAPI（iam.googleapis.com、pubsub.googleapis.com、serviceusage.googleapis.com、cloudresourcemanager.googleapis.com）を有効にし、ログシンクを利用してBigQueryやCloud Loggingに転送します。また、BigQueryへのログエクスポート設定にはpartitioningとIAM条件付きアクセスを追加することで、情報の一貫性と可用性を向上させることができます。GCP Logging Docs20やGitHub - lacework/terraform-gcp-audit-log21などを参考にしてください。

監査ログ取得の実装例のポイント：
変更が行われるたびに、ログに詳細な情報（操作内容、実行者、タイムスタンプなど）が記録される
定期的な監視と自動アラートを設定することで、異常な変更や不正アクセスを早期に検出する
組織全体での監査ログの管理体制を整える
10. まとめとベストプラクティス
本記事では、Astroフレームワークを用いたウェブサイトのGoogle Cloud上での構築に必要な主要要素について、TerraformとGitHub Actionsを駆使した設定例およびベストプラクティスを解説しました。以下に主要なポイントを再確認します。

Dockerによるビルド:
マルチステージビルドにより、Node.jsステージでAstroアプリケーションをビルドし、軽量なNginxコンテナで静的ファイルを提供する構成が推奨されます。Astro Docs1, Aalto FITech101 Courses2

Cloud Runのスケーリング:
Terraformでmin_instancesおよびmax_instances、CPU・メモリのリソースリミットを明示的に設定することで、自動スケーリングを最適化します。また、CPUアイドル条件を設定することで、パフォーマンスをさらに向上できます。Cloud Run instance autoscaling4

ヘルスチェック:
/healthエンドポイントなどを実装して、Cloud RunやNginx側で動作状態を常に監視します。Configure container health checks6

Nginxの最適化:
キャッシュヘッダーの設定やworker_processesの自動設定により、リバースプロキシとしてのパフォーマンスを向上させます。Frontend proxying using Nginx7

ロードバランサーとURLマップ:
TerraformでグローバルロードバランサーやURLマップを設定し、ホスト名およびパスベースのルーティングでトラフィックを効率的に分散します。また、リージョン間フェイルオーバーを考慮した設定が求められます。HA Docs8, URL maps overview9

Cloud CDNとSSL証明書:
Google Managed SSL証明書やCloud CDNのキャッシュキー最適化、TTL設定により配信効率を高め、オリジンサーバーの負荷を軽減します。Google-managed SSL Certificates10, Caching overview11

CI/CDパイプライン:
GitHub Actionsを活用して異なる環境（production/staging）の分離、テスト、手動承認を含むデプロイメントワークフローを実装します。また、環境別ロールバック戦略も含めて、安定したデプロイを実現します。Using environments for deployment - GitHub Docs15

Keyless Authentication with Workload Identity Federation:
Workload Identity Federationを利用し、TerraformコードでGitHub ActionsからGCPへの短命な認証情報を自動生成して安全なアクセスを実現します。Cyclenerd/terraform-google-wif-github22, Access Google Cloud from HCP Terraform with workload identity19

監査ログ:
インフラ変更の透明性と安全性を高めるため、Terraformによる変更を監査ログで追跡し、Cloud LoggingやBigQueryへエクスポートする設定を実施します。GCP Logging Docs20、GitHub - lacework/terraform-gcp-audit-log21

本記事で紹介した各設定例と実装例は、ユーザー要求に基づく包括的構成の一例です。設計時は、実際の要求やトラフィック、コストの観点から各パラメータを調整するとともに、最新のベストプラクティスや公式ドキュメントを常に参照して安全で効率的なインフラ管理を実現してください。

【参考リンク】

Astro Docs: Docker Recipes1
Aalto FITech101 Courses: Astro Build Configuration2
Cloud Run Instance Autoscaling4
Configure Container Health Checks6
Google-managed SSL Certificates10
URL Maps Overview9
Using Environments for Deployment - GitHub Docs15
Cyclenerd/terraform-google-wif-github22
このような実装例と考慮事項をもとに、AstroフレームワークによるGoogle Cloud上のウェブサイト構築および運用が円滑かつセキュアに実現できることを期待しています。

まとめ
Dockerのマルチステージビルドを利用して、まずNode.js LTS環境でAstroアプリケーションをビルドし、次に軽量なnginx:alpineイメージで静的ファイルを配信する実装例が示されています。
TerraformによるCloud Runの構成では、min_instancesとmax_instances、リソース制限（例：cpu = 2、memory = 512Mi）の設定により、自動スケーリングとコストパフォーマンスの最適化が図られています。
各サービスの信頼性向上のために、/healthなどのヘルスチェックエンドポイントを実装し、コンテナの動作状態を常時監視する設定が推奨されています。
グローバルロードバランサーとURLマップの設定例では、ホスト名やパスベースのルーティングを定義し、リージョン間フェイルオーバーが可能なバックエンドヘルスチェック（例：google_compute_region_health_check）が特徴です。
Cloud CDNでは、キャッシュキーの最適化やTTLの設定とともに、Google Managed SSL証明書の自動取得・更新を利用し、コンテンツ配信の高速化とセキュリティ強化が実現されています.
CI/CDパイプラインはGitHub Actionsで構成され、productionとstaging環境の分離、テスト、承認フロー、さらにWorkload Identity Federationを用いたキー無し認証によるセキュアなデプロイが実践例として解説されています.
インスピレーションと洞察から生成されました 197 ソースから

以下は、Astroフレームワークを用いたウェブサイトをGoogle Cloud上に構築するためのTerraformコードおよび関連コンポーネント（Cloud Run、Nginxリバースプロキシ、グローバルロードバランサー、Cloud CDN、CI/CDパイプライン）の包括的な実装例とベストプラクティスをまとめた記事です。以下の各セクションでは、各構成要素の概要、具体例、コードサンプル、そしてそれぞれの設定における重要なポイントを、公開情報の引用とともに詳しく説明します。

はじめに
本記事では、Astroを用いて構築したウェブサイトをGoogle Cloud上に展開する際に必要なインフラ構築の全体像について解説します。主要な構成要素としては、以下の項目が含まれます：

Cloud Run（自動スケーリングと運用監視）
Nginx リバースプロキシ（静的ファイル配信および最適なパフォーマンスのためのキャッシュ設定）
グローバルロードバランサー（URLマップによるルーティング）
Cloud CDN（キャッシュキーの最適化とSSL証明書の管理）
CI/CDパイプライン（GitHub Actions）（自動テスト、承認フロー、環境分離およびTerraform stateの安全な管理）
Workload Identity Federationを利用したキー無し認証（GitHub ActionsとGCP間の安全な接続）
各セクションごとにコード例や実装例を交えながら、システム全体の設計とベストプラクティスに基づいた推奨事項を解説します。引用は公開されている情報をもとにし、詳細な説明とともに各構成項目の実装例を掲載しています。

1. Astro用Dockerfileの実装例 ～ Nginxリバースプロキシとマルチステージビルド
Astroでビルドした静的サイトを効率的に配信するため、Dockerfileにマルチステージビルドを採用します。初期ステージではNode.js環境でAstroアプリケーションをビルドし、最終ステージでは軽量なNginxの公式イメージ（例：nginx:alpine）でビルド成果物を提供する構成です。以下のサンプルコードは、Astro Docs1およびAalto FITech101 Courses2の情報に基づいて実装例を示しています。

サンプルコード（マルチステージビルド）:
# ステージ1: アプリケーションのビルド
FROM node:lts AS build
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build

# ステージ2: Nginxによる静的配信
FROM nginx:alpine
COPY --from=build /app/dist /usr/share/nginx/html
# カスタム設定ファイルを配置することでリバースプロキシやキャッシュ制御が可能
COPY ./nginx/nginx.conf /etc/nginx/nginx.conf

# セキュリティ強化のため、rootlessコンテナ化を実施
USER node

EXPOSE 8080
CMD ["nginx", "-g", "daemon off;"]
ポイント：

Node.jsのLTSイメージを使用して依存関係をインストールし、Astroアプリケーションをビルド
軽量なNginxイメージで静的成果物を配信
カスタムnginx.confにより、リバースプロキシ設定やキャッシュヘッダー設定をより細かく調整可能
2. Cloud RunへのTerraform構成 ～ Auto Scaling とリソース最適化
Cloud Runはサーバーレスコンテナプラットフォームとして自動スケーリングが可能です。Terraformを用いる場合、min_instances、max_instances、CPUやmemoryのリソース割当を設定することが重要です。また、cpu_idleパラメータを追加し、CPUの制限を2に設定することが推奨されます。以下のTerraformサンプルコードは、Cloud Runサービスのリソース設定例です。Cloud Run Release Notes3 、Cloud Run instance autoscaling4およびSet maximum number of instances5を参照しています。

Terraformのサンプルコード（Cloud Runサービス設定）:
resource "google_cloud_run_service" "default" {
  name     = "my-service"
  location = "us-central1"

  template {
    spec {
      containers {
        image = "gcr.io/my-project/my-image"
        resources {
          limits = {
            cpu    = "2"      # 各インスタンスに2コアを割り当て
            memory = "512Mi"  # 512MiBのメモリ
          }
        }
      }
    }
  }

  traffic {
    latest_revision = true
    percent         = 100
  }

  metadata {
    annotations = {
      "autoscaling.knative.dev/minScale" = "1"
      "autoscaling.knative.dev/maxScale" = "5"
      "autoscaling.knative.dev/cpu_idle"  = "0.5" # CPUアイドル条件
    }
  }
}
ポイント：

min_instances と max_instances によりインスタンス数の下限と上限を管理
リソース制限の設定によりコストとパフォーマンスの最適化を図る
3. ヘルスチェックエンドポイントの実装
信頼性の高いサービス運用のためには、各コンテナの起動と動作状態を監視するヘルスチェックエンドポイントの設定が必要です。Astroアプリケーションの場合、シンプルに /health や /ping のエンドポイントを実装し、正常な稼働時にはHTTP 200を返すようにします。Configure container health checks6などが参考になります。

ヘルスチェック実装のポイント：
エンドポイント実装例：
/health エンドポイントを実装し、サーバーが正常動作している場合はHTTP 200を返す
異常時には適切なエラーコード（例: 500）を返し、監視システムが検知できるようにする
4. Nginxのキャッシュ制御とパフォーマンス最適化
4.1 Nginxキャッシュヘッダー設定
Nginxは静的ファイルを配信する際、キャッシュヘッダーの設定によりさらにパフォーマンスを向上させることが可能です。具体的には、expiresディレクティブやadd_header Cache-Controlを利用し、ブラウザキャッシュを最適化します。Cloud Run docs: Frontend proxying using Nginx7を参照ください。

サンプル設定例：
server {
  listen 80;
  server_name example.com;

  location / {
    root /usr/share/nginx/html;
    expires 30d;
    add_header Cache-Control "public, max-age=2592000";
  }
}
4.2 Nginxワーカープロセス数の最適化
Nginxのワーカープロセス数は、通常ホストの物理CPUコア数に合わせて自動的に設定するのが推奨されます。具体的には、worker_processes auto;の設定により、各CPUコアに1つのプロセスが割り当てられ最適なパフォーマンスが見込まれます。Frontend proxying using Nginx7を参照してください。

5. グローバルロードバランサーとURLマップによるルーティング設定
複数リージョンにデプロイしたCloud Runや他のバックエンドサービスに対して、グローバルロードバランサーを用いて効率的にトラフィックを分散させることが重要です。Terraformを使用してURLマップとバックエンドサービスを定義し、ホスト名とパスベースのルーティングを実装できます。また、google_compute_region_health_checkリソースを追加し、リージョン間フェイルオーバー設定を行うことが推奨されます。HA Docs8およびURL maps overview9を参照してください。

サンプルコード（URLマップ設定例）:
resource "google_compute_url_map" "example_map" {
  name            = "example-map"
  default_service = google_compute_backend_service.default.self_link

  host_rules {
    hosts        = ["example.com"]
    path_matcher = "example-path-matcher"
  }

  path_matchers {
    name            = "example-path-matcher"
    default_service = google_compute_backend_service.default.self_link

    path_rules {
      paths   = ["/api/*"]
      service = google_compute_backend_service.api_service.self_link
    }
    path_rules {
      paths   = ["/static/*"]
      service = google_compute_backend_service.static_service.self_link
    }
  }
}

resource "google_compute_region_health_check" "default" {
  name                = "example-health-check"
  check_interval_sec  = 30
  timeout_sec         = 10
  healthy_threshold   = 2
  unhealthy_threshold = 2

  http_health_check {
    port               = 80
    request_path       = "/health"
  }
}
ポイント：

URLマップによって、特定のホスト名やパスに基づく振り分けが可能
複数バックエンドへのトラフィック分割を柔軟に管理できる
6. Cloud CDNとGoogle Managed SSL証明書
Cloud CDNは、エッジネットワークを利用してコンテンツの配信速度を向上させ、オリジンサーバーの負荷を軽減します。また、Google Managed SSL証明書を利用することで、証明書の取得・管理・更新を自動化できます。Google-managed SSL Certificates10やCloud CDNキャッシュキーの最適化戦略11の情報をもとに設定例を示します。

6.1 Google Managed SSL証明書の取得
以下のTerraformコードは、Google Managed SSL証明書を取得する例です。

resource "google_compute_managed_ssl_certificate" "example_cert" {
  name = "my-cert"
  managed {
    domains = ["example.com"]
  }
}
DNSレコードを更新し、証明書の状態がACTIVEとなるのを確認します。（例：gcloud compute ssl-certificates describe my-cert --format="get(managed.domainStatus)"）参照: Google-managed SSL Certificates10

6.2 Cloud CDNキャッシュキーの最適化
Cloud CDNのキャッシュキーから不要なクエリパラメータを除外するため、以下のようにTerraformで設定します。

resource "google_compute_backend_service" "example_backend" {
  name = "example-backend"
  cdn_policy {
    cache_key_policy {
      include_query_string = false
      include_host         = true
      include_protocol     = true
    }
  }
  // その他の設定
}
(参照: Content delivery best practices12, Caching overview11)

6.3 キャッシュ有効期限と削除ポリシー
キャッシュ利用の効率性を向上させるため、TTL（有効期限）を設定します。以下はサンプル設定例です。

resource "google_compute_backend_service" "example_backend" {
  name       = "example-backend"
  enable_cdn = true
  cdn_policy {
    cache_mode  = "CACHE_ALL_STATIC"
    default_ttl = 3600    # 60分のキャッシュ有効期限
    max_ttl     = 86400   # 24時間の上限TTL
  }
}
(参照: Caching overview11, Cloud CDN release notes13)

7. CI/CDパイプラインの実装：GitHub Actionsによるプロダクション／ステージング環境の分離と承認フロー
信頼性の高いデプロイメントを実現するため、GitHub Actionsを用いたCI/CDパイプラインの構築は必須です。ここでは、環境変数（Environment）機能を用いてproductionとstagingを分離し、自動テスト、承認、デプロイまでのワークフロー例を示します。また、環境別ロールバック戦略として、Harness Terraform Rollback Stepの実装例も追加しました。Harness Docs14 、Using environments for deployment - GitHub Docs15およびTerraform manage multiple environments - Medium16の情報を踏まえています。

7.1 GitHub Environments の設定
Environment作成:

production と staging 環境をそれぞれ定義
個別のシークレット、環境変数、保護ルール（承認）を設定
ブランチ戦略:

mainブランチをproduction、developまたは専用ブランチをstagingとして管理
7.2 自動テストとデプロイ承認のワークフロー例
以下はGitHub ActionsのYAML例です。

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Install Dependencies
        run: npm install
      - name: Run Unit & E2E Tests
        run: npm test

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: test
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: "projects/XXXX/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-oidc"
          service_account: "my-service-account@example-project.iam.gserviceaccount.com"
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy my-service \
            --image gcr.io/example-project/my-image \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated

  rollback:
    name: Rollback to previous version
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Rollback using Harness
        run: |
          # Rollback step using Harness
          harness rollback terraform --environment "${{ github.ref }}" --service "my-service"
ポイント：

自動テストが成功した場合のみ次の承認・デプロイステップへ進む
Production/ステージング毎の環境設定により、シークレット・アクセス管理と保護ルールが適用される
Workload Identity Federationを用い、サービスアカウントキーをGitHub Secretsに保存せずに安全な認証を実現する
GitHub - google-github-actions/auth17
8. Keyless Authentication for CI/CD ～ Workload Identity Federationの実装
GitHub ActionsからGoogle Cloudへ安全な認証を行うため、Workload Identity Federationを利用します。これにより、長期間有効なサービスアカウントキーを使わず、短命のOAuth 2.0資格情報を自動生成して利用することが可能です。Secure your use of third party tools with identity federation18およびAccess Google Cloud from HCP Terraform with workload identity19を参照しています。

8.1 TerraformによるWorkload Identity Federation実装例
以下のコード例は、GitHub ActionsとGCP間でWorkload Identity Federationを実装するための基本的なTerraform設定例です。

locals {
  google_project_id = "example-project"
  organization_name = "example-org"
}

resource "google_iam_workload_identity_pool" "hcp_tf" {
  project                   = local.google_project_id
  workload_identity_pool_id = "hcp-tf-pool"
  display_name              = "HCP Terraform Pool"
  description               = "Used to authenticate to Google Cloud"
}

resource "google_iam_workload_identity_pool_provider" "hcp_tf" {
  project                            = local.google_project_id
  workload_identity_pool_id          = google_iam_workload_identity_pool.hcp_tf.workload_identity_pool_id
  workload_identity_pool_provider_id = "hcp-tf-provider"
  display_name                       = "HCP Terraform Provider"
  description                        = "Used to authenticate to Google Cloud"
  attribute_condition                = "assertion.terraform_organization_name==\"${local.organization_name}\""
  oidc {
    issuer_uri = "https://app.terraform.io"
  }
}
ポイント：

複数リージョンや環境ごとに専用プールを用意することで、セキュリティの向上とアクセス権の細分化が可能
Workload Identity Federationにより、GitHub Actions側から特定のサービスアカウントにアクセスできる認証情報を短命かつ安全に発行できる
9. 監査ログによるTerraform変更の追跡とセキュリティ管理
インフラ変更の透明性と安全運用を実現するため、Terraformによる変更は監査ログで追跡する必要があります。対象プロジェクトに対して必要なAPI（iam.googleapis.com、pubsub.googleapis.com、serviceusage.googleapis.com、cloudresourcemanager.googleapis.com）を有効にし、ログシンクを利用してBigQueryやCloud Loggingに転送します。また、BigQueryへのログエクスポート設定にはpartitioningとIAM条件付きアクセスを追加することで、情報の一貫性と可用性を向上させることができます。GCP Logging Docs20やGitHub - lacework/terraform-gcp-audit-log21などを参考にしてください。

監査ログ取得の実装例のポイント：
変更が行われるたびに、ログに詳細な情報（操作内容、実行者、タイムスタンプなど）が記録される
定期的な監視と自動アラートを設定することで、異常な変更や不正アクセスを早期に検出する
組織全体での監査ログの管理体制を整える
10. まとめとベストプラクティス
本記事では、Astroフレームワークを用いたウェブサイトのGoogle Cloud上での構築に必要な主要要素について、TerraformとGitHub Actionsを駆使した設定例およびベストプラクティスを解説しました。以下に主要なポイントを再確認します。

Dockerによるビルド:
マルチステージビルドにより、Node.jsステージでAstroアプリケーションをビルドし、軽量なNginxコンテナで静的ファイルを提供する構成が推奨されます。Astro Docs1, Aalto FITech101 Courses2

Cloud Runのスケーリング:
Terraformでmin_instancesおよびmax_instances、CPU・メモリのリソースリミットを明示的に設定することで、自動スケーリングを最適化します。また、CPUアイドル条件を設定することで、パフォーマンスをさらに向上できます。Cloud Run instance autoscaling4

ヘルスチェック:
/healthエンドポイントなどを実装して、Cloud RunやNginx側で動作状態を常に監視します。Configure container health checks6

Nginxの最適化:
キャッシュヘッダーの設定やworker_processesの自動設定により、リバースプロキシとしてのパフォーマンスを向上させます。Frontend proxying using Nginx7

ロードバランサーとURLマップ:
TerraformでグローバルロードバランサーやURLマップを設定し、ホスト名およびパスベースのルーティングでトラフィックを効率的に分散します。また、リージョン間フェイルオーバーを考慮した設定が求められます。HA Docs8, URL maps overview9

Cloud CDNとSSL証明書:
Google Managed SSL証明書やCloud CDNのキャッシュキー最適化、TTL設定により配信効率を高め、オリジンサーバーの負荷を軽減します。Google-managed SSL Certificates10, Caching overview11

CI/CDパイプライン:
GitHub Actionsを活用して異なる環境（production/staging）の分離、テスト、手動承認を含むデプロイメントワークフローを実装します。また、環境別ロールバック戦略も含めて、安定したデプロイを実現します。Using environments for deployment - GitHub Docs15

Keyless Authentication with Workload Identity Federation:
Workload Identity Federationを利用し、TerraformコードでGitHub ActionsからGCPへの短命な認証情報を自動生成して安全なアクセスを実現します。Cyclenerd/terraform-google-wif-github22, Access Google Cloud from HCP Terraform with workload identity19

監査ログ:
インフラ変更の透明性と安全性を高めるため、Terraformによる変更を監査ログで追跡し、Cloud LoggingやBigQueryへエクスポートする設定を実施します。GCP Logging Docs20、GitHub - lacework/terraform-gcp-audit-log21

本記事で紹介した各設定例と実装例は、ユーザー要求に基づく包括的構成の一例です。設計時は、実際の要求やトラフィック、コストの観点から各パラメータを調整するとともに、最新のベストプラクティスや公式ドキュメントを常に参照して安全で効率的なインフラ管理を実現してください。

【参考リンク】

Astro Docs: Docker Recipes1
Aalto FITech101 Courses: Astro Build Configuration2
Cloud Run Instance Autoscaling4
Configure Container Health Checks6
Google-managed SSL Certificates10
URL Maps Overview9
Using Environments for Deployment - GitHub Docs15
Cyclenerd/terraform-google-wif-github22
このような実装例と考慮事項をもとに、AstroフレームワークによるGoogle Cloud上のウェブサイト構築および運用が円滑かつセキュアに実現できることを期待しています。

まとめ
Dockerのマルチステージビルドを利用して、まずNode.js LTS環境でAstroアプリケーションをビルドし、次に軽量なnginx:alpineイメージで静的ファイルを配信する実装例が示されています。
TerraformによるCloud Runの構成では、min_instancesとmax_instances、リソース制限（例：cpu = 2、memory = 512Mi）の設定により、自動スケーリングとコストパフォーマンスの最適化が図られています。
各サービスの信頼性向上のために、/healthなどのヘルスチェックエンドポイントを実装し、コンテナの動作状態を常時監視する設定が推奨されています。
グローバルロードバランサーとURLマップの設定例では、ホスト名やパスベースのルーティングを定義し、リージョン間フェイルオーバーが可能なバックエンドヘルスチェック（例：google_compute_region_health_check）が特徴です。
Cloud CDNでは、キャッシュキーの最適化やTTLの設定とともに、Google Managed SSL証明書の自動取得・更新を利用し、コンテンツ配信の高速化とセキュリティ強化が実現されています.
CI/CDパイプラインはGitHub Actionsで構成され、productionとstaging環境の分離、テスト、承認フロー、さらにWorkload Identity Federationを用いたキー無し認証によるセキュアなデプロイが実践例として解説されています.
もっと詳しく
1
docs.astro.build
2
fitech101.aalto.fi
3
cloud.google.com
4
cloud.google.com
5
cloud.google.com
6
cloud.google.com
7
cloud.google.com
8
cloud.google.com
9
cloud.google.com
10
cloud.google.com
11
cloud.google.com
12
cloud.google.com
13
cloud.google.com
14
developer.harness.io
15
docs.github.com
16
medium.com
17
github.com
18
cloud.google.com
19
www.hashicorp.com
20
cloud.google.com
21
github.com
22
github.com

