---
description: 
globs: 
alwaysApply: false
---
# Pull Request 自動レビュールール

## 🔍 レビュー実行条件
- Pull Request作成時
- コード変更プッシュ時
- レビュー要求時
- `@pr-review` メンション時

## 📋 レビュー観点

### 1. コード品質チェック
- [ ] **Google コーディング規約準拠**
  - 命名規則（camelCase, PascalCase, snake_case）
  - インデント・スペーシング
  - コメント記述ルール
- [ ] **可読性・保守性**
  - 関数・クラスの単一責任原則
  - 適切な抽象化レベル
  - マジックナンバーの排除
- [ ] **エラーハンドリング**
  - try-catch適切な実装
  - エラーメッセージの明確性
  - 例外の適切な伝播

### 2. テスト品質チェック
- [ ] **テスト存在確認**
  - 新機能に対応するテストコード
  - 修正箇所のテストカバレッジ
  - エッジケースのテスト
- [ ] **テストカバレッジ**
  - 目標: 80%以上
  - 重要なビジネスロジック: 100%
  - 統合テストの適切性
- [ ] **テスト品質**
  - テストの独立性
  - モック・スタブの適切な使用
  - テストデータの管理

### 3. セキュリティチェック
- [ ] **入力値検証**
  - SQLインジェクション対策
  - XSS対策
  - CSRF対策
- [ ] **認証・認可**
  - 適切な権限チェック
  - セッション管理
  - APIキー・トークン管理
- [ ] **機密情報管理**
  - ハードコードされた秘密情報
  - 環境変数の適切な使用
  - ログ出力での機密情報漏洩

### 4. パフォーマンスチェック
- [ ] **効率性**
  - アルゴリズムの計算量
  - データベースクエリ最適化
  - メモリ使用量
- [ ] **スケーラビリティ**
  - 並行処理の考慮
  - リソース使用量
  - ボトルネック分析

## 🤖 自動チェック項目

### 静的解析
```bash
# Python
flake8 src/
mypy src/
bandit -r src/

# JavaScript/TypeScript
npm run lint
npm run type-check
npm audit

# セキュリティスキャン
npm audit --audit-level moderate
safety check
```

### テスト実行
```bash
# Python
pytest --cov=src --cov-report=html
pytest --cov-fail-under=80

# JavaScript
npm test -- --coverage
npm run test:integration
```

## 📝 レビューコメント形式

### 成功時のコメント
```markdown
## ✅ AI Code Review - 合格

### 📊 品質スコア: 85/100

### ✨ 良い点
- 適切なエラーハンドリングが実装されています
- テストカバレッジが目標値を上回っています (85%)
- セキュリティベストプラクティスに準拠しています

### 💡 改善提案
- 関数 `processData()` の複雑度が高いため、分割を検討してください
- コメントをもう少し詳細にすると保守性が向上します

### 🎯 次のステップ
このPRは品質基準を満たしています。マージ可能です。
```

### 問題発見時のコメント
```markdown
## ⚠️ AI Code Review - 要修正

### 📊 品質スコア: 65/100

### 🚨 必須修正項目
- **セキュリティ**: APIキーがハードコードされています (line 42)
- **テスト**: 新機能 `UserService` のテストが不足しています
- **品質**: 関数 `calculateTotal()` の複雑度が高すぎます (CC: 15)

### ⚠️ 改善推奨項目
- エラーメッセージをより具体的にしてください
- 型注釈を追加してください

### 🔧 修正方法
1. APIキーを環境変数に移動: `os.getenv('API_KEY')`
2. UserServiceのテストを追加: `tests/test_user_service.py`
3. calculateTotal関数を複数の小さな関数に分割

### 📋 チェックリスト
- [ ] セキュリティ問題修正
- [ ] テスト追加
- [ ] コード複雑度改善
```

## 🎯 レビュー優先度

### 🔴 Critical (即座修正必須)
- セキュリティ脆弱性
- 本番環境への影響
- データ損失リスク

### 🟡 High (マージ前修正推奨)
- テストカバレッジ不足
- パフォーマンス問題
- 設計上の問題

### 🟢 Medium (改善提案)
- コード品質向上
- 可読性改善
- ドキュメント充実

### 🔵 Low (将来的改善)
- リファクタリング提案
- 最適化案
- 技術的負債

## 📈 品質スコア計算

```
品質スコア = (
  コード品質 × 0.3 +
  テスト品質 × 0.3 +
  セキュリティ × 0.25 +
  パフォーマンス × 0.15
) × 100
```

### スコア基準
- **90-100**: 優秀 (即座マージ可能)
- **80-89**: 良好 (軽微な改善後マージ)
- **70-79**: 普通 (改善推奨)
- **60-69**: 要改善 (修正必須)
- **0-59**: 不合格 (大幅修正必要)

## 🔄 継続的改善
- レビュー結果をデータベースに蓄積
- 頻出問題のパターン分析
- ルールの自動更新
- 開発者フィードバック収集

