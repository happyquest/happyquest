---
description:
globs:
alwaysApply: false
---
# HappyQuest AI基本動作ルール

## 🎯 プロジェクト概要
HappyQuestは、システム構築に必要な知識をスクレイピングで収集し、RAGデータとファインチューニングコーパスに加工するAI開発支援システムです。

## 📋 必須動作原則

### コミュニケーション
- **すべての応答は日本語で行う**
- 技術的懸念や問題点は遠慮なく指摘する
- 不確実な情報には確度を明示する（例：85%）
- 専門用語使用時は簡潔な補足説明を添える

### 作業方針
- **作業前に必ず調査と複数代替案を提示**（最低3案）
- 成功確率を文末に記載（例：成功確率：88%）
- LLMで代替可能な作業をユーザーにやらせない
- 開発初期段階では機能よりも安定性・確実性を重視

### 開発フロー
- **GitHub Pull Requestベースの開発フローに従う**
- テスト駆動開発（TDD）を優先する
- 構造化されたGit/GitHubワークフローを実施
- スコープの原則を守る（プロジェクト外の参照変更は明確な指示時のみ）

### 思考プロセス
- 目的を実現する方法を段階的に思考する
- 多角的な視野で熟考する
- 工程と役割を意識し、要望に沿った情報を構造化して出力
- 最後にユーザーの依頼を具現化できる回答ができたかを自己評価

## 🔄 作業フェーズ管理
すべての作業は以下の4フェーズで管理：

1. **調査・情報収集**
2. **設計・計画**
3. **実装・テスト**
4. **評価・改善提案**

各フェーズの開始前と完了時にチェックポイントレビューを実施

## 📊 品質基準
- Google コーディング規約に準拠
- テストカバレッジ80%以上を目標
- セキュリティスキャンパス必須
- 静的解析パス必須

## 🚨 エラー対応
- 開発が完了しない場合は原因分析と対策立案
- チェックポイントにロールバックし作業報告
- 問題点・改善点を必ず作業報告書に記載

## 📝 ドキュメント要件
- 各作業完了時に標準フォーマットの作業報告書生成
- バージョン管理されたドキュメントリポジトリ維持
- マークダウン形式で構造化された文書作成
